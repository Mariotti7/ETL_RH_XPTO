# -*- coding: utf-8 -*-
"""RH XPTO

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lLJ4LaiHcnUPE-6mVTaRUJbzPP-m3veF

# **OBJETIVO**

##Explorar:
por meio das técnicas de gestão de projetos e
análise exploratória algumas das
possíveis relações e insights que se podem obter a partir da base de dados. Use
o poder de síntese do grupo para encontrar e apresentar apenas os insights que
na visão do grupo realmente possam ajudar a empresa a atingir seus objetivos
com essa análise (lembrando que o principal objetivo é ter um ambiente em que
os funcionários não se sintam desgastados com a XPTO)

##REQUISITOS OBRIGATÓRIOS:

Medidas de estatística descritiva (tendência central,
dispersão, separatrizes e associação) de pelo menos 4 atributos que possam
ajudar com insights relevantes para a empresa.

Pelo menos três distribuições de frequência para atributos
diferentes, sendo obrigatoriamente atributos quantitativos e qualitativos,
lembrando que para atributos quantitativos as distribuições de frequência dever ser agrupadas por faixas de valores.
"""

import pandas as pd
import numpy as np
from scipy.stats import iqr
import matplotlib.pyplot as plt
import seaborn as sns

"""#**DESCONSIDERAR OS DADOS BRUTOS, UMA VEZ QUE, JÁ FORAM TRATADOS ANTERIORMENTE**"""

url = '/content/desgaste_funcionarios_bruto.csv'

df = pd.read_csv(url)
df

"""##**ANÁLISE EXPLORATÓRIA**

Análise exploratória deve conter:

- medidas descritivas(quantitativas e qualitativas)

**Quantitativas**
- Formas de agregação

- Medidas de tendencia central(media, mediana e moda) - concentração

- medidas de dispersão(variancia e desvio padrão) - espalhamento

- medidas de posição e separatrizes (quartiz, percentis e outliers)

**Qualitativas**
- Frequencia
- Frequencia relativa


**COEFICIENTE DE CORRELAÇÃO(r)**
- Quanto de explicação tem a relação entre eixo X e Y

**COEFICIENTE DE DETERMINAÇÃO(r²)**

##**Verificação dos nomes das colunas**
"""

df.info()

"""##**Tratamento de Dados**"""

# Renomenado as colunas para facilitar
df.rename(columns={
    'Idade':'idade','Demissão':'demissao','Viagem de negócios':'viajar','Diárias recebidas':'diarias','Departamento':'departamento',
    'Distância de Casa':'distancia','Escolaridade':'escolaridade','Área de Formação':'formação',
    'Número de contratos de trabalho na empresa':'contratos','ID Funcionário':'id','Nível de Satisfação com o ambiente de trabalho':'satisfação ambiente trabalho',
    'Gênero':'genero','Salário por hora':'salario hora','Nível de envolvimento com o trabalho':'envolvimento trabalho',
    'Nível hierárquico':'nivel hierarquico','Cargo':'cargo','Satisfação com o trabalho':'satisfação trabalho','Estado civil':'estado civil',
    'Renda mensal':'renda','Salário Mensal':'salario','qtde de empresas que já trabalhou':'empresas trabalhadas','Maior de idade':'maioridade',
    'Faz hora extra':'hora extra','percentual de aumento de salário':'aumento de salario','score de performance':'performance',
    'Satisfação nas relações no trabalho':'satisfação relações trabalho','Jornada padrão de trabalho':'jornada',
    'opção de remuneração variável em ações':'stocks','Total de anos trabalhados':'anos trabalhados',
    'Qtde de treinamentos realizados no último ano':'treinamentos feitos','Equilíbrio vida trabalho':'qualidade de vida',
    'Total de anos trabalhados na empresa':'tempo de casa','Anos trabalhados na função atual':'anos função atual',
    'Anos desde a última promoção':'ultima promoção','Anos trabalhando com o atual gestor':'tempo com atual gestor'}, inplace=True)
df

df.info()

# Atualizando informações numéricas de escolaridade
df['escolaridade']=df['escolaridade'].map({1:'Abaixo da faculdade', 2:'Faculdade',3:'Bacharelado', 4:'Mestre', 5:'Doutor'})

# Atualizando informações numéricas de satisfação ambiente trabalho
df['satisfação ambiente trabalho']=df['satisfação ambiente trabalho'].map({1:'Baixo',2:'Médio',3:'Alto',4:'Muito Alto'})

# Atualizando informações numéricas de envolvimento trabalho
df['envolvimento trabalho']=df['envolvimento trabalho'].map({1:'Baixo',2:'Médio',3:'Alto',4:'Muito Alto'})

# Atualizando informações numéricas de nivel hierarquico
df['nivel hierarquico']=df['nivel hierarquico'].map({1:'Muito Baixo',2:'Baixo',3:'Médio',4:'Alto',5:'Muito Alto'})

# Atualizando informações numéricas de satisfação trabalho
df['satisfação trabalho']=df['satisfação trabalho'].map({1:'Baixo',2:'Médio',3:'Alto',4:'Muito Alto'})

# Atualizando informações numéricas de satisfação relações trabalho
df['satisfação relações trabalho']=df['satisfação relações trabalho'].map({1:'Baixo',2:'Médio',3:'Alto',4:'Muito Alto'})

# Atualizando informações numéricas de stocks
df['stocks']=df['stocks'].map({0:'Zero',1:'Baixo',2:'Médio',3:'Alto'})

# Atualizando informações numéricas de qualidade de vida
df['qualidade de vida']=df['qualidade de vida'].map({1:'Ruim',2:'Bom',3:'Muito Bom',4:'Ótimo'})

df.head(1)

"""#**CONSIDERAR A PARTIR DOS DADOS TRATADOS**"""

# Dados tratados
df.to_csv('desgastes_funcionarios_tratados.csv',index=False)

url2=('/content/desgastes_funcionarios_tratados.csv')
rh = pd.read_csv(url2)

display(rh)

"""## **AGRUPAMENTOS**"""

# Agrupado por Demissao, agregado por média e mostrado as demissões + salario mensal
rh[['demissao','salario','genero']].groupby(['demissao','genero']).mean()

# Média de Salário por Departamento
rh[['demissao','departamento','salario']].groupby(['departamento','demissao']).mean()

# Total de Funcionários por Cargo
rh[['cargo','id']].groupby(['cargo']).count()

# Média de Satisfação no Trabalho por Gênero
rh[['genero','satisfação trabalho','id']].groupby(['genero','satisfação trabalho']).count()

# Distribuição de funcionários por gênero que não foram demitidos por satisfação no trabalho
rh[['satisfação trabalho','genero','demissao']].loc[rh['demissao']=='Não'].value_counts()

# Distribuição de funcionários por gênero que foram demitidos por satisfação no trabalho
rh[['satisfação trabalho','genero','demissao']].loc[rh['demissao']=='Sim'].value_counts()

# Distribuição de funcionários por gênero que não foram demitidos e estão com baixa satisfação no trabalho
rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Não') & (rh['satisfação trabalho'] == 'Baixo')].value_counts()

"""## **Densidade de Densidade comparando Funcionários e ex-Funcionários, por Genêro e Baixa Satisfação no Trabalho**"""

# Filtro dos funcionários e ex funcionários por gênero, e satisfação no trabalho
baixa_satisfacao_funcionarios = rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Não') & (rh['satisfação trabalho'] == 'Baixo') & (rh['genero'] == 'Masculino')].value_counts()
baixa_satisfacao_demitidos = rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Sim') & (rh['satisfação trabalho'] == 'Baixo') & (rh['genero'] == 'Masculino')].value_counts()

# dataframe para plotagem
dados = pd.DataFrame({
    'Funcionarios': baixa_satisfacao_funcionarios ,
    'Demitidos': baixa_satisfacao_demitidos
}).fillna(0)

# Plotando o gráfico de densidade
plt.figure(figsize=(14,6))
sns.kdeplot(data=dados['Funcionarios'], label='Funcionários com Baixa Satisfação', fill=True, alpha=0.5)
sns.kdeplot(data=dados['Demitidos'], label='Ex-Funcionários com Baixa Satisfação', fill=True, alpha=0.5)

# Adicionando título e legendas
plt.title('Comparação de Densidade: Funcionários vs. Ex-Funcionários com Baixa Satisfação no Trabalho')
plt.xlabel('Gênero Masculino')
plt.ylabel('Densidade')
plt.legend()
plt.grid()
plt.show()

"""A altura da curva em qualquer ponto do gráfico indica a densidade de dados naquele intervalo. Quanto mais alta a curva, maior a densidade dos dados. Ou seja, há uma distribuição maior entre os ex-funcionários com baixa satisfação do que entre os funcionários."""

# Filtro dos funcionários e ex funcionários por gênero, e satisfação no trabalho
baixa_satisfacao_funcionarios = rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Não') & (rh['satisfação trabalho'] == 'Baixo') & (rh['genero'] == 'Feminino')].value_counts()
baixa_satisfacao_demitidos = rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Sim') & (rh['satisfação trabalho'] == 'Baixo') & (rh['genero'] == 'Feminino')].value_counts()

# dataframe para plotagem
dados = pd.DataFrame({
    'Funcionarios': baixa_satisfacao_funcionarios ,
    'Demitidos': baixa_satisfacao_demitidos
}).fillna(0)

# Plotando o gráfico de densidade
plt.figure(figsize=(14,6))
sns.kdeplot(data=dados['Funcionarios'], label='Funcionários com Baixa Satisfação', fill=True, alpha=0.5)
sns.kdeplot(data=dados['Demitidos'], label='Ex-Funcionários com Baixa Satisfação', fill=True, alpha=0.5)

# Adicionando título e legendas
plt.title('Comparação de Densidade: Funcionários vs. Ex-Funcionários com Baixa Satisfação no Trabalho')
plt.xlabel('Gênero Feminino')
plt.ylabel('Densidade')
plt.legend()
plt.grid()
plt.show()

# Distribuição de funcionários por gênero que foram demitidos e estão com baixa satisfação no trabalho
rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Sim') & (rh['satisfação trabalho'] == 'Baixo')].value_counts()

# Distribuição de funcionários por gênero que não foram demitidos e estão com médio satisfação no trabalho
rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Não') & (rh['satisfação trabalho'] == 'Médio')].value_counts()

# Distribuição de funcionários por gênero que foram demitidos e estão com médio satisfação no trabalho
rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Sim') & (rh['satisfação trabalho'] == 'Médio')].value_counts()

# Distribuição de funcionários por gênero que não foram demitidos e estão com alto satisfação no trabalho
rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Não') & (rh['satisfação trabalho'] == 'Alto')].value_counts()

# Distribuição de funcionários por gênero que foram demitidos e estão com alto satisfação no trabalho
rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Sim') & (rh['satisfação trabalho'] == 'Alto')].value_counts()

# Distribuição de funcionários por gênero que não foram demitidos e estão com muito alto satisfação no trabalho
rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Não') & (rh['satisfação trabalho'] == 'Muito Alto')].value_counts()

# Distribuição de funcionários por gênero que foram demitidos e estão com muito alto satisfação no trabalho
rh[['satisfação trabalho', 'genero', 'demissao']].loc[(rh['demissao'] == 'Sim') & (rh['satisfação trabalho'] == 'Muito Alto')].value_counts()

# Distribuição de Funcionários Demitidos por Estado Civil
rh[['estado civil','demissao']].groupby('estado civil')['demissao'].value_counts()

# Distribuição de Funcionários Demitidos por Estado Civil e Gênero
rh[['estado civil','demissao','genero']].groupby(['estado civil','genero'])['demissao'].value_counts()

#Média de Idade por Escolaridade
round(rh.groupby('escolaridade')['idade'].mean(),1)

#Média de Idade por Escolaridade e Genero
round(rh[['escolaridade','genero','idade']].groupby(['escolaridade','genero']).mean(),1)

# Contagem de satisfação nas relações no trabalho(baixo) distribuido por cargo
rh.loc[rh['satisfação relações trabalho']=='Baixo'].groupby('cargo')[['satisfação relações trabalho']].value_counts()

# Contagem de satisfação nas relações no trabalho(médio) distribuido por cargo
rh.loc[rh['satisfação relações trabalho']=='Médio'].groupby('cargo')[['satisfação relações trabalho']].value_counts()

# Contagem de satisfação nas relações no trabalho(alto) distribuido por cargo
rh.loc[rh['satisfação relações trabalho']=='Alto'].groupby('cargo')[['satisfação relações trabalho']].value_counts()

# Contagem de satisfação nas relações no trabalho(muito alto) distribuido por cargo
rh.loc[rh['satisfação relações trabalho']=='Muito Alto'].groupby('cargo')[['satisfação relações trabalho']].value_counts()

# Contagem de satisfação nas relações no trabalho(muito alto) distribuido por cargo
media_satisfacao_baixo_cargo = rh.loc[rh['satisfação relações trabalho']=='Baixo'].groupby('cargo')[['satisfação relações trabalho']].value_counts().mean()
media_satisfacao_medio_cargo = rh.loc[rh['satisfação relações trabalho']=='Médio'].groupby('cargo')[['satisfação relações trabalho']].value_counts().mean()
media_satisfacao_alto_cargo = rh.loc[rh['satisfação relações trabalho']=='Alto'].groupby('cargo')[['satisfação relações trabalho']].value_counts().mean()
media_satisfacao_malto_cargo = rh.loc[rh['satisfação relações trabalho']=='Muito Alto'].groupby('cargo')[['satisfação relações trabalho']].value_counts().mean()

print(f'A média de satisfação nas relações de trabalho por cargo - Baixo: {media_satisfacao_baixo_cargo:.2f}')
print(f'A média de satisfação nas relações de trabalho por cargo - Médio: {media_satisfacao_medio_cargo:.2f}')
print(f'A média de satisfação nas relações de trabalho por cargo - Alto: {media_satisfacao_alto_cargo:.2f}')
print(f'A média de satisfação nas relações de trabalho por cargo - Muito Alto: {media_satisfacao_malto_cargo:.2f}')

# Total de Horas Extras por Departamento
rh.loc[(rh['departamento'] == 'Pesquisa e Desenvolvimento') & (rh['hora extra'] == 'Sim')].groupby('departamento')['hora extra'].value_counts()

rh.loc[(rh['departamento'] == 'Pesquisa e Desenvolvimento') & (rh['hora extra'] == 'Não')].groupby('departamento')['hora extra'].value_counts()

rh.loc[(rh['departamento'] == 'Recursos Humanos') & (rh['hora extra'] == 'Sim')].groupby('departamento')['hora extra'].value_counts()

rh.loc[(rh['departamento'] == 'Recursos Humanos') & (rh['hora extra'] == 'Não')].groupby('departamento')['hora extra'].value_counts()

rh.loc[(rh['departamento'] == 'Vendas') & (rh['hora extra'] == 'Sim')].groupby('departamento')['hora extra'].value_counts()

rh.loc[(rh['departamento'] == 'Vendas') & (rh['hora extra'] == 'Não')].groupby('departamento')['hora extra'].value_counts()

# Média de Distância de Casa por Gênero
round(rh.groupby('genero')['distancia'].mean(),3)

# Média de Satisfação do Ambiente de Trabalho por Hierarquia
rh.groupby('nivel hierarquico')['satisfação ambiente trabalho'].value_counts().mean()

# Média de Satisfação do Ambiente de Trabalho por Hierarquia
media_satisfacao_ambiente_hierarquia_ma = rh.loc[(rh['nivel hierarquico'] == 'Muito Alto')].groupby('nivel hierarquico')['satisfação ambiente trabalho'].value_counts().mean()
media_satisfacao_ambiente_hierarquia_a = rh.loc[(rh['nivel hierarquico'] == 'Alto')].groupby('nivel hierarquico')['satisfação ambiente trabalho'].value_counts().mean()
media_satisfacao_ambiente_hierarquia_m = rh.loc[(rh['nivel hierarquico'] == 'Médio')].groupby('nivel hierarquico')['satisfação ambiente trabalho'].value_counts().mean()
media_satisfacao_ambiente_hierarquia_b = rh.loc[(rh['nivel hierarquico'] == 'Baixo')].groupby('nivel hierarquico')['satisfação ambiente trabalho'].value_counts().mean()

print('Média de Satisfação do Ambiente de Trabalho por Hierarquia')
print(f'Muito Alto: {media_satisfacao_ambiente_hierarquia_ma}')
print(f'Alto: {media_satisfacao_ambiente_hierarquia_a}')
print(f'Médio: {media_satisfacao_ambiente_hierarquia_m}')
print(f'Baixo: {media_satisfacao_ambiente_hierarquia_b}')

# Média de Aumento Salarial por Tempo de Promoção(Anos)
rh.groupby('ultima promoção')['aumento de salario'].mean()

# Total de Treinamentos por Cargo
treinamentos_por_cargo_total = rh.groupby('cargo')['treinamentos feitos'].sum()
treinamentos_por_cargo_funcionario = rh.loc[(rh['demissao']=='Não')].groupby('cargo')['treinamentos feitos'].sum()
treinamentos_por_cargo_demitido = rh.loc[(rh['demissao']=='Sim')].groupby('cargo')['treinamentos feitos'].sum()

print('Total de Treinamentos por Cargo\n')
print(f'Funcionários: {treinamentos_por_cargo_funcionario}')

print(f'Ex-Funcionários: {treinamentos_por_cargo_demitido}')

print(f'Total: {treinamentos_por_cargo_total}')

# Média de Salário por Experiência na Função
round(rh.groupby('anos função atual')['salario'].mean(),2)

# Número de Funcionários que Viajam por Departamento
rh.loc[(rh['demissao']=='Não')].groupby('departamento')['viajar'].value_counts()

# Número de ex-Funcionários que Viajam por Departamento
rh.loc[(rh['demissao']=='Sim')].groupby('departamento')['viajar'].value_counts()

# Contagem de Satisfação no Trabalho por Distância
rh.groupby('distancia')['satisfação trabalho'].value_counts()

# Média de Renda por Estado Civil
round(rh.groupby('estado civil')['renda'].mean(),2)

#Total de Stock Options de Funcionários
total_stock_option_func = rh.loc[(rh['demissao']=='Não')].groupby('cargo')['stocks'].value_counts().sum()
print('Total de Stock Options por Funcionários')
print(f'{total_stock_option_func}')

#Total de Stock Options por cargo
total_stock_option_diretor_manufatura = rh.loc[(rh['cargo']=='Diretor de manufatura')].groupby('cargo')['stocks'].value_counts().sum()
print(f'Total de Stock options para Diretor de Manufatura: {total_stock_option_diretor_manufatura}')

#Total de Stock Options por cargo
total_stock_option_diretor_vendas= rh.loc[(rh['cargo']=='Executivo de vendas')].groupby('cargo')['stocks'].value_counts().sum()
print(f'Total de Stock options para Executivo de Vendas: {total_stock_option_diretor_vendas}')

#Total de Stock Options por cargo
total_stock_option_gerente = rh.loc[(rh['cargo']=='Gerente')].groupby('cargo')['stocks'].value_counts().sum()
print(f'Total de Stock options para Gerente: {total_stock_option_gerente}')

#Total de Stock Options por cargo
total_stock_option_pesquisador_cientista = rh.loc[(rh['cargo']=='Pesquisador cientista')].groupby('cargo')['stocks'].value_counts().sum()
print(f'Total de Stock options para Pesquisador Cientista: {total_stock_option_pesquisador_cientista}')

#Total de Stock Options por cargo
total_stock_option_rh = rh.loc[(rh['cargo']=='Recursos Humanos')].groupby('cargo')['stocks'].value_counts().sum()
print(f'Total de Stock options para Recursos Humanos: {total_stock_option_rh}')

#Total de Stock Options por cargo
total_stock_option_representante_saude = rh.loc[(rh['cargo']=='Reprentante de saúde')].groupby('cargo')['stocks'].value_counts().sum()
print(f'Total de Stock options para Representante de Saúde: {total_stock_option_representante_saude}')

#Total de Stock Options por cargo
total_stock_option_representante_vendas = rh.loc[(rh['cargo']=='Representante de vendas')].groupby('cargo')['stocks'].value_counts().sum()
print(f'Total de Stock options para Representante de Vendas: {total_stock_option_representante_vendas}')

#Total de Stock Options por cargo
total_stock_option_tecnico_laboratorio = rh.loc[(rh['cargo']=='Técnico de Laboratório')].groupby('cargo')['stocks'].value_counts().sum()
print(f'Total de Stock options para Técnico de Laboratório: {total_stock_option_tecnico_laboratorio}')

# Distribuição de Funcionários por Idade e Gênero
rh.groupby(['idade', 'genero']).size()

#Média de Salário por Experiência na Empresa(anos)
round(rh.groupby('tempo de casa')['salario'].mean(),2)

# Total de Funcionários por Hierarquia e Cargo
rh[['id','nivel hierarquico','cargo']].groupby(['nivel hierarquico', 'cargo']).count()

"""##**EXPLORANDO OS DADOS**

Funcionários:
 - Estado Civil
 - Departamento
 - Genero
 - Escolaridade
 - Salário
    - Satisfação:
      - Ambiente de Trabalho
      - Relações de Trabalho
      - No Trabalho
        - Qtd de Treinamentos
         - Total de anos Trabalhados
         - Anos desde a última promoção
         - Score de Performance
         - Qualidade de vida
"""

rh[['estado civil','genero']].loc[(rh['demissao']=='Sim')].groupby(['estado civil','genero'])['genero'].value_counts()